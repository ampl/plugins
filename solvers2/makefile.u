# /*******************************************************************
# Copyright (C) 2017 AMPL Optimization, Inc.; written by David M. Gay.
# 
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and that
# both that the copyright notice and this permission notice and warranty
# disclaimer appear in supporting documentation.
# 
# The author and AMPL Optimization, Inc. disclaim all warranties with
# regard to this software, including all implied warranties of
# merchantability and fitness.  In no event shall the author be liable
# for any special, indirect or consequential damages or any damages
# whatsoever resulting from loss of use, data or profits, whether in an
# action of contract, negligence or other tortious action, arising out
# of or in connection with the use or performance of this software.
# *******************************************************************/

# For making amplsolver.a on Unix systems.

.SUFFIXES: .c .o
CC = cc
CFLAGS = -O
SHELL=/bin/sh

# Add -DNO_RUSAGE to the CFLAGS assignment if your system
# lacks getrusage().  This only matters for compiling xectim.c.

# You may need to add
#	strerror.c \
# to the "a =" assignment below (if you get an error message about
# strerror not being found when you try to link a solver).
# If things don't run right, you may need to change -O to -g
# so you can poke around with a debugger.
# You may also need to add -D_SIZE_T to CFLAGS, or to
# comment out the definition of size_t in nlp.h .

# For the DEC Alpha, try
# CFLAGS = -O -ieee_with_no_inexact

# For HP, try
# CFLAGS = -O -Aa -Ae

# For IBM RS6000 machines, add
#	-qnomaf
# to CFLAGS (to avoid surprises from fused mutiply-add instructions),
# and for AIX versions less than 4.3, remove funcadd1.c from the "a ="
# assignment below.

# For some versions of MacOSX (e.g., 10.5), it is necessary to add
# -D_NONSTD_SOURCE to CFLAGS (for reasons that perhaps Apple can explain):
# CFLAGS = -O2 -D_NONSTD_SOURCE

# For compilation by PGI's pgcc compiler, try using
# CFLAGS = -fast -Kieee -DNO_fpu_control -pc 64

# For Solaris on the i386 architecture, add fpsetprec.s to the "a ="
# assignment below.  For compilation with Sun's cc and -xarch=generic64
# or -xarch=amd64, add fpsetprec64.s rather than fpsetprec.s to the "a ="
# assignment.  If you use gcc (try "cc --version" to see if cc is really gcc),
# no changes to the "a =" assignment are needed.

# For cygwin, change a.out to a.exe in the rule below for arith.h, and use
# CC = gcc
# CFLAGS = -O2

# For MinGW, change a.out to a.exe in the rule below for arith.h,
# change fpinit.c to fpinitmt.c in the "a =" list below, and use
# CC = gcc
# CFLAGS = -O2 -DNO_RUSAGE

.c.o:
	$(CC) -c $(CFLAGS) $*.c

all: arith.h stdio1.h amplsolver.a funcadd0.o

a = \
	asldate.c \
	atof.c \
	auxinfo.c \
	avltree.c \
	b_search.c \
	basename.c \
	bscanf.c \
	conscale.c \
	degree.c \
	derprop.c \
	details.c \
	dtoa1.c \
	duthes.c \
	dynlink.c \
	eval1.c \
	eval2.c \
	ewalloc1.c \
	ewalloc2.c \
	f_read.c \
	fg_read.c \
	fg_write.c \
	fpecatch.c \
	fpinit.c \
	fullhes.c \
	func_add.c \
	funcadd1.c \
	g_fmt.c \
	genrowno.c \
	getenv.c \
	getstub.c \
	htcl.c \
	indic_cons.c \
	jac0dim.c \
	jac2dim.c \
	jacdim.c \
	jacinc.c \
	jacinc1.c \
	libnamsave.c \
	mach.c \
	mainexit.c \
	mip_pri.c \
	misc.c \
	mpec_adj.c \
	mqpcheckv.c \
	mypow.c \
	names.c \
	nl_obj.c \
	nqpcheck.c \
	nqpcheckZ.c \
	obj_adj.c \
	obj_prec.c \
	objconst.c \
	objval_.c \
	op_type.c \
	pfghread.c \
	printf.c \
	pshvprod.c \
	punknown.c \
	qpcheck.c \
	qpcheckZ.c \
	qsortv.c \
	readsol.c \
	repwhere.c \
	sigcatch.c \
	sos_add.c \
	sphes.c \
	sscanf.c \
	stderr.c \
	studchk0.c \
	suf_sos.c \
	value.c \
	writesol.c \
	wrtsol_.c \
	ws_desc.c \
	wsu_desc.c \
	xectim.c \
	xp2known.c

ARFLAGS = ruv
amplsolver.a: $a
	$(CC) -c $(CFLAGS) $?
	x=`echo $? | sed 's/\.[cs]/.o/g'` && ar $(ARFLAGS) amplsolver.a $$x && rm $$x
	ranlib amplsolver.a || true
# If your system lacks ranlib, add a dummy ranlib to your
# search path, e.g.
#	exec true
# or just comment out the ranlib invocation above.

Aslh = arith.h asl.h funcadd.h stdio1.h
auxinfo.o funcadd.o funcadd1.o funcaddr.o libnamsave.o: funcadd.h
funcadd1.o mach.o machlc.o mypow.o printf.o sscanf.o stderr.o: arith.h
funcaddr.o: funcadd1.c
avltree.o: avltree.h
bscanf.o conscale.o degree.o derprop.o duthes.o dynlink.o eval1.o eval2.o \
	ewalloc1.o ewalloc2.o fg_write.o fpinitmt.o fullhes.o funcadd0.o \
	func_add.o g_fmt.o genrowno.o getstub.o htcl.o indic_cons.o \
	jac0dim.o jac2dim.o jacdim.o jacinc1.o jacinc.o mip_pri.o misc.o \
	mpec_adj0.o mqpcheckv.o names.o nl_obj.o nqpcheck.o obj_adj.o \
	obj_adj0.o obj_prec.o objval_.o objconst.o pfghread.o pshvprod.o \
	repwhere.o sigcatch.o sjac0dim.o sos_add.o sphes.o studchk0.o \
	suf_sos.o value.o writesol.o wrtsol_.o xp2known.o: $(Aslh)
degree.o: nlp.h nlp2.h asl_pfg.h asl_pfgh.h obj_adj.h opno.hd opno2.h
dtoa1.o: arith.h dtoa.c
duthes.o fullhes.o indic_cons.o mqpcheckv.o sphes.o suf_sos.o: \
	asl_pfgh.h psinfo.h nlp.h nlp2.h
eval1.o fg_read.o: nlp.h opno.hd errchk.h
eval2.o ewalloc2.o obj_adj.o: psinfo.h nlp.h nlp2.h
eval2.o: opno2.h errchk.h
ewalloc1.o nqpcheckZ.o qpcheck.o qpcheckZ.o readsol.o: nlp.h
fg_read.o: opcode.hd opno.hd r_opn.hd
fg_write.o: nlp.h nlp2.h opno.hd opno2.h opcode.hd
fpinit.o: fpinitmt.c
f_read.o: fg_read.c
getstub.o value.o writesol.o wrtsol_.o: getstub.h
indic_cons.o: asl_pfgh.h obj_adj.h opno.hd opno2.h
misc.o sos_add.o: asl_pfg.h asl_pfgh.h nlp.h nlp2.h
mpec_adj.o: psinfo.h jacpdim.h
mqpcheckv.o: avltree.h obj_adj.h opno.hd opno2.h
nl_obj.o nqpcheck.o: nlp.h nlp2.h asl_pfg.h asl_pfgh.h obj_adj.h
nqpcheck.o nqpcheckZ.o: opno.hd opno2.h
obj_adj.o: jacpdim.h obj_adj.h
op_type.o: op_type.hd op_typeb.hd
pfghread.o: jacpdim.h opnos.hd asl_pfg.h opcode.hd opno2.h r_opn0.hd
pshvprod.o xp2known.o: jacpdim.h opno2.h
repwhere.o: errchk.h
sphes.o: opno2.h obj_adj.h

# Use CFLAGS in compiling arithchk.c in case something in CFLAGS affects
# the number of bits in integral data types.  (It's probably best not to
# add such options to CFLAGS.)

arith.h: arithchk.c fpinit.c
	$(CC) -c $(CFLAGS) -DASL_NO_FPINITMT fpinit.c
	$(CC) $(CFLAGS) arithchk.c fpinit.o -lm ||\
	 $(CC) -DNO_LONG_LONG $(CFLAGS) arithchk.c fpinit.o -lm ||\
	 $(CC) -DNO_SSIZE_T $(CFLAGS) arithchk.c fpinit.o -lm ||\
	 $(CC) -DNO_LONG_LONG -DNO_SSIZE_T $(CFLAGS) arithchk.c fpinit.o -lm
	./a.out >arith.h
	rm -f a.out arithchk.o fpinit.o

### Alternative to arithchk.c: copy arith.h0 to arith.h, then edit
### arith.h to activate the appropriate #define line, as explained
### in the comments at the top.  For systems with IBM-mainframe
### arithmetic, see README.  You'll need to #define Arith_Kind_ASL
### suitably.  If "make arith.h" works, use the #define it gives
### (and don't fool with arith.h0).  Otherwise use
###	#define Arith_Kind_ASL 0

# If compiling dtoa1.c reveals that your system lacks float.h, malloc.h
# or memory.h, you could try
#
#	  make float.h
#
#         make malloc.h
# and/or
#         make memory.h
#
# as appropriate.

# For possible use with nested parallel make invocations, make details.c
# depend artifically on arith.h and stdio1.h, so the big amplsolver.a compile
# will start only after arith.h and stdio1.h have been created.

details.c: details.c0 arith.h stdio1.h
	sed "s!System_details!`uname -sm`!" details.c0 >details.c

float.h: float.h0
	ln float.h0 float.h

malloc.h:
	echo 'extern char *malloc();' >malloc.h

memory.h:
	echo 'extern char *memcpy();' >memory.h

stdio1.h: stdio1.h0
	cat stdio1.h0 >stdio1.h

### The rule above arranges for amplsolver.a to use printf, fprintf,
### and sprintf (renamed Printf, Fprintf, and Sprintf) as described
### in the comments at the start of printf.c, rather than the
### system-supplied routines (whose sprintf has the wrong return
### type and values on some systems).  In your solver, say
### #include "stdio1.h" rather than <stdio.h> for consistency
### with amplsolver.a .  To use the system-supplied printf (etc.),
### say "make systemprintf", and change printf.c to sprintf.c
### in the "a =" assignment above.

systemprintf:
	echo '#define NO_STDIO1' >stdio1.h
	cat stdio1.h0 >>stdio1.h

# "make xsum.out" to check for transmission errors.
# This assumes you have the xsum program, whose source is
# /netlib/f2c/src/xsum.c, e.g.,
#	http://www.netlib.org/f2c/src/xsum.c
# or
#	http://netlib.sandia.gov/f2c/src/xsum.c.gz

xs0 = \
	README \
	README.f77 \
	amplsolv.lbc \
	arith.h0 \
	arith.h1 \
	arith.ibm \
	arithchk.c \
	asl.h \
	asl_pfg.h \
	asl_pfgh.h \
	asldate.c \
	atof.c \
	auxinfo.c \
	avltree.c \
	avltree.h \
	b_search.c \
	basename.c \
	bscanf.c \
	comptry.bat \
	configure \
	configurehere \
	conscale.c \
	degree.c \
	derprop.c \
	details.c0 \
	dtoa.c \
	dtoa1.c \
	duthes.c \
	dynlink.c \
	errchk.h \
	eval1.c \
	eval2.c \
	ewalloc1.c \
	ewalloc2.c \
	f_read.c \
	fg_read.c \
	fg_write.c \
	float.h0 \
	fpecatch.c \
	fpinit.c \
	fpinitmt.c \
	fpsetprec.s \
	fpsetprec64.s \
	fullhes.c \
	func_add.c \
	funcadd.c \
	funcadd.h \
	funcadd0.c \
	funcadd1.c \
	funcaddk.c \
	funcaddr.c \
	g_fmt.c \
	genrowno.c \
	getenv.c \
	getstub.c \
	getstub.h \
	htcl.c \
	indic_cons.c \
	jac0dim.c \
	jac2dim.c \
	jac2dim.h \
	jacdim.c \
	jacinc.c \
	jacinc1.c \
	jacpdim.h \
	libnamsave.c \
	mach.c \
	mainexit.c \
	makefile.u \
	makefile.vc \
	mip_pri.c \
	misc.c \
	mpec_adj.c \
	mpec_adj0.c \
	mqpcheckv.c \
	mypow.c \
	names.c \
	nl_obj.c \
	nlp.h \
	nlp2.h \
	nqpcheck.c \
	nqpcheckZ.c \
	obj_adj.c \
	obj_adj.h \
	obj_adj0.c \
	obj_prec.c \
	objconst.c \
	objval_.c \
	op_type.c \
	op_type.hd \
	op_typeb.hd \
	opcode.hd \
	opno.hd \
	opno2.h \
	opnos.hd \
	pfghread.c \
	printf.c \
	pshvprod.c \
	psinfo.h \
	punknown.c \
	qpcheck.c \
	qpcheckZ.c \
	qsortv.c \
	r_opn.hd \
	r_opn0.hd \
	readsol.c \
	repwhere.c \
	rnd_prod.s \
	sigcatch.c \
	sjac0dim.c \
	sos_add.c \
	sphes.c \
	sprintf.c \
	sscanf.c \
	stderr.c \
	stdio1.h0 \
	strerror.c \
	studchk0.c \
	suf_sos.c \
	value.c \
	writesol.c \
	wrtsol_.c \
	ws_desc.c \
	wsu_desc.c \
	xectim.c \
	xp2known.c

xsum.out: xsum0.out $(xs0)
	xsum $(xs0) >xsum1.out
	cmp xsum0.out xsum1.out && mv xsum1.out xsum.out || diff xsum[01].out

clean:
	rm -f amplsolver.a *.o arith.h details.c float.h stdio1.h
